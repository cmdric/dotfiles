  set guifont=Monaco:h11
set nocompatible     " Disable vi-compatibility
set laststatus=2     " Always show the statusline
set encoding=utf-8   " Show unicode glyphs
set number           " Show line numbers
set esckeys          " Allow cursor keys in insert mode
set ttyfast          " Optimize for fast terminal connections
"set gdefault         " Add the g flag to search/replace by default
set binary           " Don't add empty newlines at end of files
set noeol            " Don't add empty newlines at end of files
set background=dark  " Dark bg
set tabstop=2        " Make tabs as wide as two spaces
set shiftwidth=2
set hlsearch         " Highlight searches
set ignorecase       " Ignore case of searches
set smartcase        " Smart handling of case (http://stevelosh.com/blog/2010/09/coming-home-to-vim/#using-the-leader)
set incsearch        " Highlight dynamically as pattern is typed
"set gdefault         " Defaults replacing with g
set mouse=v          " Enable mouse in all modes
set noerrorbells     " Disable error bells
set visualbell
set t_vb=
set nostartofline    " Don’t reset cursor to start of line when moving around.
set ruler            " Show the cursor position
set shortmess=filnxtToO    " Don’t show the intro message when starting vim
set showmode         " Show the current mode
set title            " Show the filename in the window titlebar
set showcmd          " Show the (partial) command as it’s being typed
"set cmdheight=2
syntax on            " Enable syntax highlighting
let mapleader=","    " Change the mapleader
let maplocalleader=","    " Change the mapleader
"set textwidth=140     " Max textwidth
set backspace=2      " Set backspace work like in most other apps
set shm=AI
set spellsuggest=10

" Show invisible characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list

" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
if exists("&undodir")
	set undodir=~/.vim/undo
endif

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Set wrapping
set wrap
set linebreak
set nolist

" Strip trailing whitespace (,ss)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>

" Better buffer management
map <silent> <leader>b :buffers<CR>:buffer<Space>

" Vundle!
source ~/.vim/bundles.vim

" Bind F2 to show "invisible" chars
nmap <silent> <F2> :set invlist<CR>:set list?<CR>
" Bind F3 to show line numbers
nmap <silent> <F3> :set invnumber<CR>:set number?<CR>
" Bind F4 to toggle Paste mode
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>
" Bind F5 to GUndo
noremap <F5> :GundoToggle<CR><CR>
" Bind F6 to TagbarToggle
noremap <F6> :TagbarToggle<CR>
let g:tagbar_usearrows = 1
" Bind F7 to YankRing Show
"noremap <F7> :YRShow<CR>

" Bind C-T to NERDTreeToggle
nmap <silent> <leader>t :NERDTreeToggle<CR>
autocmd vimenter * if !argc() | NERDTree | endif " Open NERDTree if vim is opened without any file
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif " Close vim if NERDTree is the only thing opened

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" select previously yanked line
nnoremap <leader>v V`]

" jj escapes
" nnoremap jj <ESC>

" Map the arrow keys to be based on display lines, not physical lines
map <Down> gj
map <Up> gk

" Toggle hlsearch with <leader>hs
nmap <leader>hs :set hlsearch! hlsearch?<CR>

" Adjust viewports to the same size
map <Leader>= <C-w>=
" Open vertical split and switch to it
nnoremap <leader>w <C-w>v<C-w>l
"
" Spell Check
let b:myLang=0
let g:myLangList=["nospell","en_us", "es_es"]
function! ToggleSpell()
  let b:myLang=b:myLang+1
  if b:myLang>=len(g:myLangList) | let b:myLang=0 | endif
  if b:myLang==0
    setlocal nospell
  else
    execute "setlocal spell spelllang=".get(g:myLangList, b:myLang)
  endif
  echo "spell checking language:" g:myLangList[b:myLang]
endfunction
nmap <leader>s :call ToggleSpell()<CR>

" Supertab config
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
set completeopt=menuone,longest
"autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" use :w!! to write to a file using sudo if you forgot to 'sudo vim file'
" (it will prompt for sudo password when writing)
cmap w!! %!sudo tee > /dev/null %

" Set CrtlP
let g:ctrlp_custom_ignore = {
	\ 'dir':  '\.git$\|\.hg$\|\.svn$',
	\ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\',
	\ }
let g:ctrlp_map = '<c-f>'
let g:ctrlp_extensions = ['cmdline', 'yankring']

" Configuration for yankring
let g:yankring_history_dir = "$HOME/.vim/yankring_history"

" remember previous position
set viminfo='10,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" Command to output an external command to a scratch buffer
:command! -nargs=* -complete=shellcmd R new | setlocal buftype=nofile bufhidden=hide noswapfile | r !<args>

" Remove highlighting after search
nnoremap <leader><space> :noh<cr>

" Configure latex-box
let g:tex_fold_enabled=1
let g:LatexBox_latexmk_options = '-pvc'
let g:LatexBox_autojump = 1
"function! MyLatexError()
"  execute "LatexErrors"
"  execute "copen"
"endfunction
"nmap <leader>le :call MyLatexError()<CR>
colorscheme jellybeans

" GUI options
if has("gui_running")
  set guioptions=-t
  set mouse=a          " Enable mouse in all modes
  " Unicode powerline
  let g:Powerline_symbols="unicode"
  "colorscheme badwolf
endif
if !has("gui_running")
  hi LineNr cterm=NONE ctermfg=darkgray
  hi StatusLine cterm=bold ctermfg=black ctermbg=gray
  hi StatusLineNC cterm=bold ctermfg=darkgray ctermbg=gray
  hi CursorLine cterm=NONE  ctermbg=darkred ctermfg=white
  hi TabLine  term=None cterm=None
  hi TabLineSel  term=None cterm=None
  hi Comment ctermfg=darkgray
  hi Visual          ctermfg=255 ctermbg=130
  hi Normal term=None
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
  set statusline=%<%f\ %=\:\b%n%y%m%r%w\ %l,%c%V\ %P\ 
endif

if has('mac')
  let g:LatexBox_viewer = 'open -a Preview'
endif

" Install from GitHub
let $GIT_SSL_NO_VERIFY = 'true'

" Python stuff
au FileType python set omnifunc=pythoncomplete#Complete

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.class

" Set expandtab in the end
set expandtab

" EOF
